'use strict';

// Подключаем библиотеку для чтения файлов
const fs = require('fs');
// Подключаем библиотеку для ввода с клавиатуры
const readline = require('readline');
// Создаем интерфейс чтения 
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Переменная для хранения ответа
let answer = '';
// Читаем файл
fs.readFile('./data.csv', 'utf8', (err, data) => {
  // Если во время чтения файла появилась ошибка, то останавливаем программу
  if (err) throw err;

  // Парсим файл (обрабатываем файл и загоняем все в массив)
  // Разбиваем всю базу данных по абзацам
  data = data.split('\n');
  // Потом каждую строчку разбиваем по запятым, и получаем всю туже базу, только в массиве
  data = data.map((el) => el.split(','));
  // Удаляем лишний элемент из массива в конце
  data.pop();

  // Вводим с клавиатуры дату
  rl.question('Введите дату: ', (date) => {
    // Начинаем замерять время
    let start = +new Date;
    // 3 дня до
    let from = +date.split('.')[0] - 3;
    // 3 дня после
    let to = +date.split('.')[0] + 3;
    // Создаем массива для дат
    let dates = [];
    // Массив для городов
    let arr = [];

    // Заполняем массив датами
    for (let i = from; i <= to; i++)
      dates.push(i + '.' + date.split('.')[1] + '.' + date.split('.')[2]);

    // Проходимся по всем датам
    for (let i = 0; i < dates.length; i++) {
      // Получаем дату из массива
      const date = dates[i];
      // Проходимся по всем городам
      for (let j = 0, k = 0; j < data.length; j++) {
        // Если дата первая из списка
        if (i === 0) {
          // И дата совпадает с датой в базе данных
          if (data[j][0] == date)
            // тогда мы сохраняем нужные города в отдельном массиве
            arr.push([data[j][0], +data[j][1], +data[j][2], data[j][3]]);
        }
        else { // Иначе если дата не первая из списка
          // И дата совпадает с датой в базе данных
          if (data[j][0] == date) {
            // То находим город уже в новом списке
            // Добавляем к температуре температуру другой даты
            arr[k][1] += +data[j][1];
            // Добавляем к влажности влажность другой даты
            arr[k][2] += +data[j][2];
            // увиличиваем счетчик
            k++;
          }
        }

        // Если счетчик больше чем количество городов, то обнуляем его
        if (k > 498) k = 0;
      }
    }

    // Проходимся по спику полученых городов
    for (let i = 0; i < arr.length; i++) {
      // Делим температуру на количество дней
      arr[i][1] /= 7;
      // Делим влажность на количество дней
      arr[i][2] /= 7;
      // Округляем числа до целых
      arr[i][1] = Math.round(arr[i][1]);
      arr[i][2] = Math.round(arr[i][2]);
      // Отнимаем от влажности 60 и берем по модулю
      arr[i][2] = Math.abs(arr[i][2] - 60);
    }

    // Записываем первую температуру и влажность из списка городов
    let t = arr[0][1], h = arr[0][2];
    // Проходимся циклом по городам
    arr.forEach(el => {
      // Если температура города будет больше, а влажность меньше
      if (t < el[1] && h > el[2]) {
        // Тогда сохраняем показатели
        t = el[1];
        h = el[2];
      }
    });

    // Переменная для номера в списке
    let index = 0;
    arr.forEach((el, i) => {
      // Если температура и влажность совпадают
      if (el[1] === t && el[2] == h)
        // Сохраняем индекс
        index = i;
    });

    // Записываем ответ
    answer += Math.round(t) + ' ' + Math.round(((60 + h)+(60 - h)) / 2) + ' ' + data[index][3];

    // Замеряем время исполнения
    let end = +new Date;

    // Выводим все на экран
    console.log('Time: ');
    console.log(end - start);

    console.log('Answer: ');
    console.log(answer);

    // закрываем чтение файла
    rl.close();
  });

  
});